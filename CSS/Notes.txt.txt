What we need to do to get started :
Setup Html Boiler code :
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Chapter 1</title>
</head>
<body>
    <h1>Namaste</h1>
</body>
</html>
Made a styles sheet styles.css and use some basic styling:
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html,body{
    width: 100%;
    height: 100%;
}
h1{
    background-color: red;
}
and link them using the link tag :<link rel="stylesheet" href="styles.css">
--------------------------------------------------------------------------------
Table of content : 
*Width and height
*color & Background-color
*Units : px % vm vh em rem
*max-width and max-height
*font-family
*font-size
*line-height
*text-align
*padding
*margin
*border
*display
*position
*background
*flex
*pseudo-elements
*pseudo-classes
*animation
*media queries
-------------------------------------------------------------------------------
Width and height : 
if we use: h1{
}
we are targetting all h1's in the html page
task : made a red box (box always means div out here,div stands for divisions)
Where we have more than 1 element or rectangular shape , its a div.
making a red box - 
html :
<div class="red"></div>
css :
.red{
 background-color : red;
 width : 300px;
 height : 400px;
}
classes : collection of objects
ID : specific for any component of page 
we use # to target IDs and . to target classes in an html like we targetted .red in the above example.
---------------------------------------------------------------------------------------------------
Color and Background-color: 
color changes the color of the text whereas bg-color changes the color of background and the are of div left after using text.
-----------------------------------------------------------------------------------------------------------------------------
Units :  px % vm vh em rem
px->Pixels: It is fixed area given to a div , it wont respond to different screen sizes and will remian constant all over.
%-> percentage of screen , and it *changes itself with respect to size of screen*
vw and vh->viewport width and viewport height: eg 10 vw will take 10% area of screen whereas % takes 10% area of the parent class . eg
 <div id="parent">
        <div id="child"></div>
 </div>
css :
 #parent{
width : 100px;
height : 100px;
}
#child {
 width : 100vw ;
 height : 100 vh;
} //covers whole screen
#child{
 width : 100%
 height : 100%
}//covers whole Parent div and not the screen.
em : depends on the font size of element and if given to parent is applied on child too
#test{
 font-size : 16px;
 width : 2em;
 height : 2em;
 background-color : red;
}
Here a box of 32px is created if we increase font-size to 20 , div size incerases to 40px.
rem : relative to size of html tag , stands for root-em.
html{
font-size : 16px;
}
takes it paramters from html directory/root html tag.
hence here , 2rem will be 32px;
---------------------------------------------------------------------------------------------------
Minimum and Maximum height and width :
Minimun Height and width is like stoploss in ShareMarket , even if we apply width , height less than
Min width/height , it wont go below it , it will stop at Minimun width and same goes for maximum
height/width it wont cross the limit whatever the situation is .
syntax :
min-width : 20px;
max-width : 20px;
min-height : 20px;
max=height : 20px;
---------------------------------------------------------------------------------------------------------
Font-family :
Basically of two families : Sans-serif-has soft edges and serif-has sharp edges.
use google fonts for it .
click on font and click download family,extract and right-click -> install for all users.
The font family selection in (X)HTML, CSS, and derived systems specifies a list of prioritized fonts and generic family names
we have some more properties :
font-weight : 100-900
text-transform : Capitalize,uppercase,lowercase etc
text-decoration:underline,dashed,overline etc.;
font-size : size of fonts. use vw and vh for responsiveness
line-height : margin between lines of text , use 1,1.1 etc
text-align : center,right,left,justify.
----------------------------------------------------------------------------------------------------------------
Margin ,Padding , Display and Position : 
Padding : spacing between contents of body and inside and its outline.
Margin : Spacing between two bodies and spacing is applied outside outline of component
Border : border outside component 
syntax - border : 3px Solid black;
we also have border radius : roundens the border/edges of components and 50% makes it circular.
***Display : Block //all the space is mine and simply takes all the space even if one element is inline and other is block , block comes down to next line 
        : Inline //Elements can take adjacent space, we cannot increase its width and height
        : Inline-block // We can increase its height and width.
***Position : Absolute - An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).

However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
Absolue element to screen me 1 unit upar utha deta hai and vo kisike bhi upar move ho skta hai and if css is like 
element 1 {
}
element 2{
}
element 3{
}
then if element 2 and element is 3 is absolute , element 2 , element 1 ke upar jaa skega but element 3,element 2 aur 1 dono ke upar hoga
            : Relative - Same as absolute but the element is relative to the parent container and will not move out of it , remember
              the parent container must be Relative and not child container.
            : Fixed - Fixed in the page ,even when we scroll the page 
----------------------------------------------------------------------------------------------------------------------------------
BackGround : 
in css file :
background : url(); // sets background
background-size : cover(Covers whole div)
                : contain(contains whole image in div and starts to repeat if extraa space left)
backgrund-position : centre (aligns image in div)
background-repeat  : no-repeat (doesn't rep  
background-gradient : (to right,red,yellow); to right bottom ,to left etc
-----------------------------------------------------------------------------------
Flexbox is not applied on children but on parent , it brings all the children on same axis , two axes are activated :
x-axis : main axis 
y-axis : cross axis
direction of elements tell us about the direction of main / cross axis.
Justify-content : used to work in main axis.
align-items : used to work in cross axis.
code :
html : 
  <div class="box">
        <div class="box1">

        </div>
        <div class="box2">

        </div>
        <div class="box3">

        </div>
    </div>
css : 
.box{
    display: flex;
    align-items: center; /* works in y axis hence brings elements in centre in the y axis */
    justify-content: center;/* works in x axis hence brings elements in centre in the x axis */
    /*Space-between , space-around,space-evenly,end*/
    background-color: black;
    height: 200px;
    width: 200px;
}
.box1{
    background-color: red;
    width: 50px;
    height: 50px;
}
.box2{
    background-color: green;
    width: 50px;
    height: 50px;
}
.box3{
    background-color: blue;
    width: 50px;
    height: 50px;
}
---------------------------------------------------------------------------------------------------------------
Pseudo elements and pseudo classes :
Pseudo Elements   :
::before 
::after
::first-letter
::first-line 
::selection
Pseudo Classes :
:hover - mouse over content
:active - content clicked
:focus - When Clicked and left
:nth-child(n) , takes 1,2,3.. or even 1n,2n as inputs.
Each elements has a possibility that if it desires it can activate "after and before" properties.
-----------------------------------------------------------------------------------------------------------------
Color Coding : 
Hexadecimal : #
RGB Notation : rgb 
RGBA Functional Notation  : rgba 
Max values denote White , min values denote black
rgb(255,255,255);
Hex : #(ffffff) - white (000000)- black
rgba : a is alpha meaning transparency (0-1)
hsl : hue saturation light(NOT IMPORTANT)


